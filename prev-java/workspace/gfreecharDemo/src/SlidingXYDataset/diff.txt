Index: SlidingXYDataset.java
===================================================================
--- SlidingXYDataset.java       (revision 0)
+++ SlidingXYDataset.java       (revision 0)
@@ -0,0 +1,390 @@
+package org.jfree.chart.demo;
+
+import org.jfree.data.Range;
+import org.jfree.data.general.DatasetChangeEvent;
+import org.jfree.data.general.DatasetChangeListener;
+import org.jfree.data.general.DatasetUtilities;
+import org.jfree.data.xy.AbstractXYDataset;
+import org.jfree.data.xy.XYDataset;
+
+/**
+ * A {@link XYDataset} implementation that presents a window(subset) of the
+ * items in an underlying dataset.  The index of the first "visible"
+ * item can be modified, which provides a means of "sliding" through
+ * the items in the underlying series dataset.
+ */
+
+public class SlidingXYDataset extends AbstractXYDataset
+implements XYDataset, DatasetChangeListener {
+
+  /** The underlying dataset. */
+  private XYDataset underlying;
+
+  /** The index of the first item. */
+  private int firstItemIndex;
+
+  /** The maximum number of items to present in the window. */
+  private int windowCount;
+
+  /** Storage for the series offset from the items at 0.
+   *  This list must be kept in sync with the seriesList. */
+  private int[] seriesOffset;
+
+
+  /**
+   * Creates a new <code>SlidingXYDataset</code> class that
+   * applies a dynamically updateable sliding through the underlying
+   * dataset.
+   *
+   * @param underlying  the underlying dataset (<code>null</code> not
+   * permitted).
+   * @param firstItemIndex the first item index
+   * @param windowCount the window count
+   */
+  public SlidingXYDataset(XYDataset underlying, int firstItemIndex,
+      int windowCount) {
+    this.underlying = underlying;
+    this.underlying.addChangeListener(this);
+    this.windowCount = windowCount;
+    this.firstItemIndex = firstItemIndex;
+    this.seriesOffset = new int[getSeriesCount()];
+    for (int i = 0; i <  seriesOffset.length; i++) {
+      seriesOffset[i] = getOffSet(i);
+    }
+  }
+
+  /**
+   * Gets the off set of the series from the left most item
+   * in the dataset. This assumes the domain(X) values to
+   * be in equal intervals.
+   *
+   * @param series the series index
+   *
+   * @return the off set
+   */
+  private int getOffSet(int series) {
+    double firstX =
+      DatasetUtilities.findMinimumDomainValue(this.underlying).doubleValue();
+    double seriesFirstX = getFirstXValue(series);
+    double diff = getInterval();
+    int offset = (int) ((seriesFirstX - firstX) / diff);
+    return offset;
+  }
+
+  /**
+   * Gets the interval.
+   * It is the difference between to consecutive
+   * x values.
+   *
+   * This assumes the domain(X) values to
+   * be in equal intervals.
+   *
+   *
+   * @return the interval
+   */
+  private double getInterval() {
+    double second = this.underlying.getXValue(0, 1);
+    double first = getFirstXValue(0);
+    return second - first;
+  }
+
+  /**
+   * Gets the length of the underlying dataset.
+   *
+   * @return the length
+   */
+  private int getLength() {
+    Range range = DatasetUtilities.findDomainBounds(this.underlying);
+    double length = range.getLength();
+    int items = (int) (length / getInterval());
+    return items;
+  }
+
+  /**
+   * Gets the first x value in the series.
+   *
+   * @param i the i
+   *
+   * @return the first x value
+   */
+  private double getFirstXValue(int i) {
+    return this.underlying.getXValue(i, 0);
+  }
+
+  /**
+   * Returns the underlying dataset that was supplied to the constructor.
+   *
+   * @return The underlying dataset (never <code>null</code>).
+   */
+  public XYDataset getUnderlyingDataset() {
+    return this.underlying;
+  }
+
+  /**
+   * Returns the index of the first visible item.
+   *
+   * @return The index.
+   *
+   * @see #setFirstItemIndex(int)
+   */
+  public int getFirstItemIndex() {
+    return this.firstItemIndex;
+  }
+
+
+  /**
+   * Sets the index of the first item that should be used from the
+   * underlying dataset, and sends a {@link DatasetChangeEvent} to all
+   * registered listeners.
+   *
+   * @param first  the index.
+   *
+   * @see #getFirstItemIndex()
+   */
+  public void setFirstItemIndex(int first) {
+    int lastIndex = first + windowCount - 1;
+    int length = getLength();
+    if (first < 0
+        || lastIndex >= length) {
+      throw new IllegalArgumentException("Invalid index." + first);
+    }
+    this.firstItemIndex = first;
+    fireDatasetChanged();
+  }
+
+  /**
+   * Returns the number of items in the specified series to be displayed in
+   * the window.
+   *
+   * @param series  the series index (in the range <code>0</code> to
+   * <code>getSeriesCount() - 1</code>).
+   *
+   * @return The item count.
+   *
+   * @throws IllegalArgumentException if <code>series</code> is not in the
+   * specified range.
+   */
+  public int getItemCount(int series) {
+
+    if ((series < 0) || (series >= getSeriesCount())) {
+      throw new IllegalArgumentException("Series index out of bounds");
+    }
+    int itemCount = 0;
+
+    int seriesItemCount = this.underlying.getItemCount(series);
+    int offset = seriesOffset[series];
+    int seriesEndIndex = offset + seriesItemCount;
+
+    int windowEndIndex = firstItemIndex + windowCount;
+
+    if (firstItemIndex >= seriesEndIndex) {
+      return 0;
+    }
+    if (firstItemIndex >= offset) {
+      itemCount = windowCount;
+    }
+    else {
+      if (windowEndIndex > offset) {
+        itemCount = windowEndIndex - offset;
+      }
+    }
+    return itemCount;
+  }
+
+  /**
+   * Returns the x-value for an item within a series using the
+   * offsets relative positions in the underlying dataset.
+   *
+   * @param series  the series index (in the range <code>0</code> to
+   * <code>getSeriesCount() - 1</code>).
+   * @param item  the item index (in the range <code>0</code> to
+   * <code>getItemCount(series)</code>).
+   *
+   * @return The x-value.
+   *
+   * @throws ArrayIndexOutOfBoundsException if <code>series</code> is not
+   * within the specified range.
+   *
+   * @see #getX(int, int)
+   */
+  public double getXValue(int series, int item) {
+    int newIndex = getItemIndex(series, item);
+    double value = this.underlying.getXValue(series, newIndex);
+    return value;
+  }
+
+  /**
+   * Gets the corresponding item index in the underlying
+   * dataset.
+   *
+   * @param series the series
+   * @param item the item in the window
+   *
+   * @return the item index
+   */
+  private int getItemIndex(int series, int item) {
+    int newIndex = item + firstItemIndex - seriesOffset[series];
+    int seriesLastItemIndex = this.underlying.getItemCount(series) - 1;
+
+    if (newIndex >= seriesLastItemIndex) {
+      newIndex = seriesLastItemIndex;
+    }
+    else {
+      int index = item + firstItemIndex;
+      int offset = seriesOffset[series];
+      if (firstItemIndex >= offset) {
+        newIndex = index - offset;
+      }
+      else {
+        newIndex = item;
+      }
+    }
+    return newIndex;
+  }
+
+  /**
+   * Returns the x-value for an item within a series using the
+   * offsets relative positions in the underlying dataset.
+   *
+   * @param series  the series index (in the range <code>0</code> to
+   * <code>getSeriesCount() - 1</code>).
+   * @param item  the item index (in the range <code>0</code> to
+   * <code>getItemCount(series)</code>).
+   *
+   * @return The x-value.
+   *
+   * @throws ArrayIndexOutOfBoundsException if <code>item</code> is not
+   * within the specified range.
+   *
+   * @see #getXValue(int, int)
+   */
+  public Number getX(int series, int item) {
+    return new Double(getXValue(series, item));
+  }
+
+  /**
+   * Returns the y-value for an item within a series using the
+   * offsets relative positions in the underlying dataset.
+   *
+   * @param series  the series index (in the range <code>0</code> to
+   * <code>getSeriesCount() - 1</code>).
+   * @param item  the item index (in the range <code>0</code> to
+   * <code>getItemCount(series)</code>).
+   *
+   * @return The y-value.
+   *
+   * @throws ArrayIndexOutOfBoundsException if <code>series</code> is not
+   * within the specified range.
+   *
+   * @see #getY(int, int)
+   */
+  public double getYValue(int series, int item) {
+    int newIndex = getItemIndex(series, item);
+    return this.underlying.getYValue(series, newIndex);
+  }
+
+  /**
+   * Returns the y-value for an item within a series using the
+   * offsets relative positions in the underlying dataset.
+   *
+   * @param series  the series index (in the range <code>0</code> to
+   * <code>getSeriesCount() - 1</code>).
+   * @param item  the item index (in the range <code>0</code> to
+   * <code>getItemCount(series)</code>).
+   *
+   * @return The y-value.
+   *
+   * @throws ArrayIndexOutOfBoundsException if <code>series</code> is not
+   * within the specified range.
+   *
+   * @see #getY(int, int)
+   */
+  public Number getY(int series, int item) {
+    return new Double(getYValue(series, item));
+  }
+
+  /**
+   * Returns the number of series in the dataset.
+   *
+   * @return The series count.
+   */
+  public int getSeriesCount() {
+    return this.underlying.getSeriesCount();
+  }
+
+  /**
+   * Returns the key for a series.
+   *
+   * @param series  the series index (in the range <code>0</code> to
+   * <code>getSeriesCount() - 1</code>).
+   *
+   * @return The key for the series.
+   *
+   * @throws IllegalArgumentException if <code>series</code> is not in the
+   * specified range.
+   */
+  public Comparable getSeriesKey(int series) {
+    if ((series < 0) || (series >= getSeriesCount())) {
+      throw new IllegalArgumentException("Series index out of bounds");
+    }
+    return underlying.getSeriesKey(series);
+  }
+
+  /**
+   * Receives notification of an dataset change event.
+   *
+   * @param event  information about the event.
+   */
+  public void datasetChanged(DatasetChangeEvent event) {
+    this.fireDatasetChanged();
+  }
+
+  /**
+   * Tests this <code>SlidingXYDataset</code> instance for equality with an
+   * arbitrary object.  This method returns <code>true</code> if and only if:
+   * <ul>
+   * <li><code>obj</code> is not <code>null</code>;</li>
+   * <li><code>obj</code> is an instance of
+   * <code>SlidingXYDataset</code>;</li>
+   * <li>both datasets have the same number of series, each containing
+   * exactly the same values, window and firstItemIndex.</li>
+   * </ul>
+   *
+   * @param obj  the object (<code>null</code> permitted).
+   *
+   * @return A boolean.
+   */
+  public boolean equals(Object obj) {
+    if (obj == this) {
+      return true;
+    }
+    if (!(obj instanceof SlidingXYDataset)) {
+      return false;
+    }
+    SlidingXYDataset that = (SlidingXYDataset) obj;
+    if (this.firstItemIndex != that.firstItemIndex) {
+      return false;
+    }
+    if (this.windowCount != that.windowCount) {
+      return false;
+    }
+    if (!this.underlying.equals(that.underlying)) {
+      return false;
+    }
+    return true;
+  }
+
+  /**
+   * Returns a hash code for this instance.
+   *
+   * @return A hash code.
+   */
+  public int hashCode() {
+    int result;
+    result = this.underlying.hashCode();
+    result = 29 * result + this.firstItemIndex;
+    result = 17 * result + this.windowCount;
+    return result;
+  }
+}
+
Index: SlidingXYDatasetTests.java
===================================================================
--- SlidingXYDatasetTests.java  (revision 0)
+++ SlidingXYDatasetTests.java  (revision 0)
@@ -0,0 +1,83 @@
+package org.jfree.chart.demo;
+
+import org.jfree.data.xy.XYDataset;
+import org.jfree.data.xy.XYSeries;
+import org.jfree.data.xy.XYSeriesCollection;
+
+import junit.framework.TestCase;
+
+public class SlidingXYDatasetTests extends TestCase {
+
+  public static final int WINDOW = 3;
+  public static final int FIRST = 0;
+
+  SlidingXYDataset dataset = createDataset();
+
+
+  public void testGetSeriesCount() {
+    assertEquals(3, dataset.getSeriesCount());
+  }
+
+  public void testGetXValue() {
+    int series = 1;
+    int item =0;
+    assertEquals(1.0, dataset.getXValue(series, item), 0.0);
+
+  }
+
+  public void testGetYValue() {
+    int series = 1;
+    int item =0;
+    assertEquals(6.0, dataset.getYValue(series, item), 0.0);
+  }
+
+  public void testGetItemCount() {
+
+    //firstItemIndex=0
+    assertEquals(0, dataset.getItemCount(0));
+    assertEquals(3, dataset.getItemCount(1));
+    assertEquals(1, dataset.getItemCount(2));
+
+    dataset.setFirstItemIndex(1);
+    assertEquals(0, dataset.getItemCount(0));
+    assertEquals(3, dataset.getItemCount(1));
+    assertEquals(2, dataset.getItemCount(2));
+
+    dataset.setFirstItemIndex(4);
+    assertEquals(2, dataset.getItemCount(0));
+    assertEquals(0, dataset.getItemCount(1));
+    assertEquals(0, dataset.getItemCount(2));
+
+
+  }
+
+  private SlidingXYDataset createDataset() {
+
+    final XYSeries series1 = new XYSeries("0");
+    series1.add(6.0, 7.0);
+    series1.add(7.0, 5.0);
+    series1.add(8.0, 7.0);
+    series1.add(9.0, 5.0);
+    series1.add(10.0, 7.0);
+
+
+    final XYSeries series2 = new XYSeries("1");
+    series2.add(1.0, 6.0);
+    series2.add(2.0, 7.0);
+    series2.add(3.0, 5.5);
+
+    final XYSeries series3 = new XYSeries("2");
+
+    series3.add(3.0, 4.0);
+    series3.add(4.0, 3.0);
+
+
+    final XYSeriesCollection dc = new XYSeriesCollection();
+    dc.addSeries(series1);
+    dc.addSeries(series2);
+    dc.addSeries(series3);
+    this.dataset = new SlidingXYDataset(dc, FIRST, WINDOW);
+    return dataset;
+  }
+
+}
Index: SliderDemo1.java
===================================================================
--- SliderDemo1.java    (revision 0)
+++ SliderDemo1.java    (revision 0)
@@ -0,0 +1,201 @@
+package org.jfree.chart.demo;
+
+/*
+ * SliderDemo1.java
+ * ---------------
+ * A demo that uses a SlidingXYDataset that provides a window of the
+ * underlying dataset
+ *
+ * This example uses XYSeries
+ *
+ */
+
+import java.awt.BorderLayout;
+import javax.swing.JPanel;
+import javax.swing.JSlider;
+import javax.swing.event.ChangeEvent;
+import javax.swing.event.ChangeListener;
+
+import org.jfree.chart.ChartFactory;
+import org.jfree.chart.ChartPanel;
+import org.jfree.chart.JFreeChart;
+
+import org.jfree.chart.axis.ValueAxis;
+import org.jfree.chart.plot.PlotOrientation;
+import org.jfree.chart.plot.XYPlot;
+
+import org.jfree.data.xy.XYDataset;
+import org.jfree.data.xy.XYSeries;
+import org.jfree.data.xy.XYSeriesCollection;
+import org.jfree.chart.util.ApplicationFrame;
+import org.jfree.chart.util.RefineryUtilities;
+
+public class SliderDemo1 extends ApplicationFrame {
+
+  /** The Constant COUNT. */
+  static final int COUNT = 20;
+
+  /** The Constant WINDOW. */
+  public static final int WINDOW = 5;
+
+  /** The Constant FIRST. */
+  public static final int FIRST = 0;
+
+  /**
+   * The Class DemoPanel.
+   */
+  private static class DemoPanel extends JPanel
+  implements ChangeListener {
+
+    //private TimeSeries series;
+
+    /** The chart panel. */
+    private ChartPanel chartPanel;
+
+    /** The chart. */
+    private JFreeChart chart;
+
+    /** The slider. */
+    private JSlider slider;
+
+    /** The dataset. */
+    private SlidingXYDataset dataset;
+
+    /**
+     * Creates a new demo panel.
+     */
+    public DemoPanel() {
+      super(new BorderLayout());
+      this.chart = createChart();
+      this.chartPanel = new ChartPanel(this.chart);
+      this.chartPanel.setPreferredSize(new java.awt.Dimension(600, 270));
+      add(this.chartPanel);
+      JPanel dashboard = new JPanel(new BorderLayout());
+      this.slider = new JSlider(0, COUNT - WINDOW - 1, 0);
+      slider.setPaintLabels(true);
+      slider.setPaintTicks(true);
+      slider.setMajorTickSpacing(WINDOW);
+      this.slider.addChangeListener(this);
+      dashboard.add(this.slider);
+      add(dashboard, BorderLayout.SOUTH);
+    }
+
+    /**
+     * Creates the demo chart.
+     *
+     * @return The chart.
+     */
+    private JFreeChart createChart() {
+      XYDataset dataset2 = createDataset2();
+      JFreeChart chart2 = ChartFactory.createXYLineChart("Sliding demo1",
+          "xAxisLabel", "yAxisLabel",
+          dataset2, PlotOrientation.VERTICAL, true, true, false);
+      XYPlot plot = chart2.getXYPlot();
+      ValueAxis xaxis =  plot.getDomainAxis();
+      xaxis.setAutoRange(true);
+      return chart2;
+    }
+
+
+
+    /**
+     * Creates a sample dataset.
+     *
+     * @return a sample dataset.
+     */
+    private XYDataset createDataset2() {
+
+      final XYSeries series1 = new XYSeries("First");
+      series1.add(1.0, 5.0);
+      series1.add(2.0, 7.0);
+      series1.add(3.0, 5.0);
+      series1.add(4.0, 7.0);
+      series1.add(5.0, 5.0);
+      series1.add(6.0, 7.0);
+      series1.add(7.0, 5.0);
+      series1.add(8.0, 7.0);
+      series1.add(9.0, 5.0);
+      series1.add(10.0, 7.0);
+      series1.add(11.0, 5.0);
+      series1.add(12.0, 7.0);
+      series1.add(13.0, 5.0);
+      series1.add(14.0, 7.0);
+      series1.add(15.0, 5.0);
+      series1.add(16.0, 7.0);
+      series1.add(17.0, 5.0);
+      series1.add(18.0, 7.0);
+      series1.add(19.0, 5.0);
+
+      final XYSeries series2 = new XYSeries("Second");
+      series2.add(1.0, 6.0);
+      series2.add(2.0, 7.0);
+      series2.add(3.0, 5.5);
+
+      final XYSeries series3 = new XYSeries("Third");
+
+      series3.add(3.0, 4.0);
+      series3.add(4.0, 3.0);
+      series3.add(5.0, 4.0);
+      series3.add(6.0, 3.0);
+      series3.add(7.0, 4.0);
+      series3.add(8.0, 3.0);
+      series3.add(9.0, 4.0);
+      series3.add(10.0, 3.0);
+      series3.add(11.0, 4.0);
+      series3.add(12.0, 3.0);
+
+
+      final XYSeriesCollection dc = new XYSeriesCollection();
+      dc.addSeries(series1);
+      //dc.addSeries(series2);
+      dc.addSeries(series3);
+      this.dataset = new SlidingXYDataset(dc, FIRST, WINDOW);
+      return dataset;
+    }
+
+
+    /**
+     * Handles a state change event.
+     *
+     * @param event  the event.
+     */
+    public void stateChanged(ChangeEvent event) {
+      int value = this.slider.getValue();
+      this.dataset.setFirstItemIndex(value);
+    }
+  }
+
+  /**
+   * A demonstration application showing how to control a crosshair using an
+   * external UI component.
+   *
+   * @param title  the frame title.
+   */
+  public SliderDemo1(String title) {
+    super(title);
+    setContentPane(new DemoPanel());
+  }
+
+  /**
+   * Creates a panel for the demo (used by SuperDemo.java).
+   *
+   * @return A panel.
+   */
+  public static JPanel createDemoPanel() {
+    return new DemoPanel();
+  }
+
+  /**
+   * Starting point for the demonstration application.
+   *
+   * @param args  ignored.
+   */
+  public static void main(String[] args) {
+    SliderDemo1 demo = new SliderDemo1("SliderDemo Demo");
+    demo.pack();
+    RefineryUtilities.centerFrameOnScreen(demo);
+    demo.setVisible(true);
+
+  }
+
+}
\ No newline at end of file
Index: SliderDemo2.java
===================================================================
--- SliderDemo2.java    (revision 0)
+++ SliderDemo2.java    (revision 0)
@@ -0,0 +1,195 @@
+package org.jfree.chart.demo;
+
+/*
+/*
+ * SliderDemo2.java
+ * ---------------
+ * A demo that uses a SlidingXYDataset that provides a window of the
+ * underlying dataset
+ *
+ * This example uses TimeSeries
+ *
+ */
+
+import java.awt.BorderLayout;
+import javax.swing.JPanel;
+import javax.swing.JSlider;
+import javax.swing.event.ChangeEvent;
+import javax.swing.event.ChangeListener;
+import org.jfree.chart.ChartFactory;
+import org.jfree.chart.ChartPanel;
+import org.jfree.chart.JFreeChart;
+import org.jfree.chart.axis.DateAxis;
+import org.jfree.chart.plot.XYPlot;
+import org.jfree.chart.util.ApplicationFrame;
+import org.jfree.chart.util.RefineryUtilities;
+import org.jfree.data.time.Minute;
+import org.jfree.data.time.RegularTimePeriod;
+import org.jfree.data.time.TimeSeries;
+import org.jfree.data.xy.XYDataset;
+import org.jfree.data.time.TimeSeriesCollection;
+
+
+/**
+ * A demo that uses a "wrapper" dataset that provides a window of the
+ * underlying dataset.
+ */
+public class SliderDemo2 extends ApplicationFrame {
+
+  /** The Constant COUNT. */
+  static final int COUNT = 200;
+
+  /** The Constant WINDOW. */
+  public static final int WINDOW = 25;
+
+  /** The Constant FIRST. */
+  public static final int FIRST = 0;
+
+  /**
+   * The Class DemoPanel.
+   */
+  private static class DemoPanel extends JPanel
+  implements ChangeListener {
+
+
+    /** The chart panel. */
+    private ChartPanel chartPanel;
+
+    /** The chart. */
+    private JFreeChart chart;
+
+    /** The slider. */
+    private JSlider slider;
+
+    /** The dataset. */
+    private SlidingXYDataset dataset;
+
+    /**
+     * Creates a new demo panel.
+     */
+    public DemoPanel() {
+      super(new BorderLayout());
+      this.chart = createChart();
+      this.chartPanel = new ChartPanel(this.chart);
+      this.chartPanel.setPreferredSize(new java.awt.Dimension(600, 270));
+      add(this.chartPanel);
+      JPanel dashboard = new JPanel(new BorderLayout());
+      this.slider = new JSlider(0, COUNT - WINDOW - 1, 0);
+      slider.setPaintLabels(true);
+      slider.setPaintTicks(true);
+      slider.setMajorTickSpacing(WINDOW);
+      this.slider.addChangeListener(this);
+      dashboard.add(this.slider);
+      add(dashboard, BorderLayout.SOUTH);
+    }
+
+    /**
+     * Creates the demo chart.
+     *
+     * @return The chart.
+     */
+    private JFreeChart createChart() {
+
+      XYDataset dataset1 = createDataset(
+          "Random 1", 100.0, new Minute(), COUNT
+      );
+
+      JFreeChart chart1 = ChartFactory.createTimeSeriesChart(
+          "Sliding Demo 3", "Time of Day", "Value",
+          dataset1, true, true, false);
+      XYPlot plot = chart1.getXYPlot();
+      DateAxis xaxis = (DateAxis) plot.getDomainAxis();
+      xaxis.setAutoRange(true);
+      return chart1;
+    }
+
+
+    /**
+     * Creates a sample dataset.
+     *
+     * @param name  the dataset name.
+     * @param base  the starting value.
+     * @param start  the starting period.
+     * @param count  the number of values to generate.
+     *
+     * @return The dataset.
+     */
+    private XYDataset createDataset(String name, double base,
+        RegularTimePeriod start, int count) {
+      TimeSeries series1 = getRandomTimeSeries(name + "1" , 100.0,
+          start, count);
+      TimeSeries series2 = getRandomTimeSeries(name + "2" , 75.0,
+          start, count / 2);
+      TimeSeriesCollection tsc = new TimeSeriesCollection();
+      tsc.addSeries(series1);
+      tsc.addSeries(series2);
+      this.dataset = new SlidingXYDataset(tsc, FIRST, WINDOW);
+      return dataset;
+    }
+
+    /**
+     * Creates a random TimeSeries.
+     *
+     * @param name  the dataset name.
+     * @param base  the starting value.
+     * @param start  the starting period.
+     * @param count  the number of values to generate.
+     *
+     * @return The TimeSeries.
+     */
+
+    private TimeSeries getRandomTimeSeries(String name, double base,
+        RegularTimePeriod start, int count) {
+      TimeSeries ts = new TimeSeries(name, start.getClass());
+      RegularTimePeriod period = start;
+      double value = base;
+      for (int i = 0; i < count; i++) {
+        ts.add(period, value);
+        period = period.next();
+        value = value * (1 + (Math.random() - 0.495) / 10.0);
+      }
+      return ts;
+    }
+
+    /**
+     * Handles a state change event.
+     *
+     * @param event  the event.
+     */
+    public void stateChanged(ChangeEvent event) {
+      int value = this.slider.getValue();
+      this.dataset.setFirstItemIndex(value);
+    }
+  }
+
+  /**
+   * The Constructor.
+   *
+   * @param title  the frame title.
+   */
+  public SliderDemo2(String title) {
+    super(title);
+    setContentPane(new DemoPanel());
+  }
+
+  /**
+   * Creates the demo panel.
+   *
+   * @return A panel.
+   */
+  public static JPanel createDemoPanel() {
+    return new DemoPanel();
+  }
+
+  /**
+   * Starting point for the demonstration application.
+   *
+   * @param args  ignored.
+   */
+  public static void main(String[] args) {
+    SliderDemo2 demo = new SliderDemo2("SliderDemo Demo3");
+    demo.pack();
+    RefineryUtilities.centerFrameOnScreen(demo);
+    demo.setVisible(true);
+  }
+}
\ No newline at end of file