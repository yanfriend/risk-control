package spyder;

import java.awt.Toolkit;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Collection;
import java.util.Date;
import java.util.Iterator;
import java.util.Random;
import java.util.Timer;
import java.util.TimerTask;
import java.util.TreeMap;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.tictactec.ta.lib.Core;
import com.tictactec.ta.lib.MAType;
import com.tictactec.ta.lib.MInteger;
import common.Bar;
import common.DataEngine;
import common.OrderEngine;
import common.PriceTypeEnum;
import common.Security;

public class HESecurity_bak extends Security
{
	static private int totalOrderNo = 0; 
	
	private double yesterdayClose;  // for HE strategy, set from config file.   
	private long DUVolume; 
	private long FRVVolume;  
	
	
	private OrderEngine orderEngine; 
	private DataEngine dataEngine; 
	
	private TreeMap<Long, Bar> barMap = new TreeMap<Long, Bar>(); 
	
	private boolean placed = false;
	
	private boolean testing;

	private transient final Logger log = LoggerFactory.getLogger(Security.class);
    private static final int CONSOLIDATE_30MINUTE_BAR = 30;
    Core taLib = new Core();   // may change to spring DI. 

    public HESecurity_bak()
    {
    	setSecurityType("STK");
    	setExchange("SMART");
    }
    public HESecurity_bak(String symbol, double yesterdayClose, long DUVolume, int orderAmount)
    {
        super();
        setSymbol(symbol); 
        setSecurityType("STK");
    	setExchange("SMART");
    	
        this.yesterdayClose = yesterdayClose;
        this.DUVolume = DUVolume; 
        this.setOrderAmount(orderAmount); 
    }
    
    @SuppressWarnings("deprecation")
	public void checkStrategy()
    {
    	Date now = new Date(dataEngine.getCurrentServerTime()*1000);
    	Date nine30 = new Date(now.getYear(), now.getMonth(), now.getDate(), 9,30,0);
        Date eleven30 = new Date(now.getYear(), now.getMonth(), now.getDate(), 11,30,0);
        Date ten30 = new Date(now.getYear(), now.getMonth(), now.getDate(), 10,30,0);
        Date fifteen30= new Date(now.getYear(), now.getMonth(), now.getDate(), 15,30,0);
        
        Date beginToday = new Date(now.getYear(), now.getMonth(), now.getDate(), 0,0,0);
        Date endToday = new Date(now.getYear(), now.getMonth(), now.getDate(), 23,59,59);
        
        long eleven30Sec = eleven30.getTime()/1000; 
        long nine30Sec = nine30.getTime()/1000;
        long beginTodaySec = beginToday.getTime()/1000;
        long endTodaySec = endToday.getTime()/1000; 
        long fifteen30Sec = fifteen30.getTime()/1000; 
        
        log.info(getSymbol() + " checking strategy, may calculate indicators..");
        Collection<Bar> barCollection = barMap.values();
        log.info("bar size:{}", barCollection.size());
        
        Iterator<Bar> iterator = barCollection.iterator();       
        Bar bar = null;       
        setTodayVolume(0);
        while (iterator.hasNext()) {          
        	bar = (Bar) iterator.next();          
        	long barSec = bar.getDate();
        	if (testing) {  // log
        		Date datetmp = new Date(barSec * 1000);  // mili-second
        		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
        		String dateStr = sdf.format(datetmp);
        		log.info("Bar data: {}, {}, close:{}, volume:{}", new Object[]{ getSymbol(), dateStr, bar.getClose(), bar.getVolume() } );
        	}
        	if ((barSec<endTodaySec)&&(barSec>beginTodaySec)) {
        		setTodayVolume(getTodayVolume() + bar.getVolume());
        	}
        	if (barSec == nine30Sec) {
        		setTodayOpen(bar.getOpen()); 
        	}
        	if (barSec == fifteen30Sec) {   // not really close until approaching 16:00
        		setTodayClose(bar.getClose());
        	}
        }  // finish checking, and calculate the specific period volume. 
        
        if ((this.placed)||(HESecurity_bak.totalOrderNo>=2)) { 
        	exitStrategy(); 
        	return; 
        }
        log.info("finish setting volume and price");
        if (!testing) {  
	        if (now.before(nine30)) { 
	        	return; 
	        }  
	        if (now.after(eleven30)) { 
	        	return; 
	        }
	        if (this.getCurrentPrice() < this.yesterdayClose) {  // current price set by real time bar
	        	log.info("current:{} < yesterday close:{}, return", getCurrentPrice(), yesterdayClose);
	        	return; 
	        }
	        if (this.getTodayVolume()*100 < this.DUVolume) {	// not vol check for test as it used now time. 
	        	log.info("volume so far:{} < DU volume:{}, return", getTodayVolume(), DUVolume);
	        	// * 100, seems ib unit
	        	return; 
	        }  
	        if ((this.getTodayOpen()-this.getYesterdayClose())/this.getYesterdayClose()>0.05) {
	        	log.info("today open:{} gap up 5% of yesterday close:{}, return", getTodayOpen(), getYesterdayClose());
	        	return; // open 5% gap of yesterday's close.
	        }
        }
        
        log.info(this.getSymbol() + " today's present volume so far {}, exceeds dry up volume {}", this.getTodayVolume(), this.getDUVolume());
        
        // check MACD Histogram (5,13,6), and Stochastics (14,1,3), so make sure it has at least 18 bars. it only checks at the time range. 
        // checking Stochastics. 
        int barSize = 16; 
        if (barCollection.size() < barSize) {
        	log.error("{} has less than 16 bars, return. {}", getSymbol(), barCollection.size());
        	return; 
        }
        
        double[] inHigh = new double[barSize];
        double[] inLow = new double[barSize];
        double[] inClose = new double[barSize];
        iterator = barCollection.iterator();
        int i = 0;
        while (iterator.hasNext()) {   
        	bar = (Bar) iterator.next();      
        	if (i++ < (barCollection.size()-barSize) ) {
        		continue; 
        	}
        	inHigh[i-1-(barCollection.size()-barSize)] = bar.getHigh();
        	inLow[i-1-(barCollection.size()-barSize)] = bar.getLow();
        	inClose[i-1-(barCollection.size()-barSize)] = bar.getClose();
        } 
        
        MInteger outBegIdx = new MInteger(); 
        MInteger outNBElement = new MInteger(); 
        double[] outSlowK = new double[barSize];
        double[] outSlowD = new double[barSize];
        
        //taLib.stoch(startIdx, endIdx, inHigh, inLow, inClose, optInFastK_Period, optInSlowK_Period, optInSlowK_MAType, optInSlowD_Period, optInSlowD_MAType, outBegIdx, outNBElement, outSlowK, outSlowD)
        taLib.stoch(0, inClose.length-1, inHigh, inLow, inClose, 14, 1, MAType.Sma, 3, MAType.Sma, outBegIdx, outNBElement, outSlowK, outSlowD);
        if (outNBElement.value != 1) {
        	log.error("please re-calculate Bar size to pass to ta-lab");
        	return; 
        }
        if (outSlowK[0] <= 75 ) {
        	log.warn("{} slowK does not meet.{}", this.getSymbol(), outSlowK[0]);
        	return; 
        }
        log.info("{} passing Stoch check...{}", getSymbol(), outSlowK[0]);        
        
        // checking MACD
        barSize = 18; 
        if (barCollection.size() < barSize) {
        	log.error("{} has less than 18 bars, return. {}", getSymbol(), barCollection.size());
        	return; 
        }
        
        double[] inDouble = new double[barSize];
        iterator = barCollection.iterator();
        i = 0;
        while (iterator.hasNext()) {   
        	bar = (Bar) iterator.next();      
        	if (i++ < (barCollection.size()-barSize) ) {
        		continue; 
        	}
        	inDouble[i-1-(barCollection.size()-barSize)] = bar.getClose();
        } 
        
        outBegIdx = new MInteger(); 
        outNBElement = new MInteger(); 
        double[] outMACD = new double[barSize];
        double[] outMACDSignal = new double[barSize];
        double[] outMACDHist = new double[barSize];
        
        taLib.macd(0, inDouble.length-1, inDouble, 5, 13, 6, outBegIdx, outNBElement, outMACD, outMACDSignal, outMACDHist);
        
        if (outNBElement.value != 1) {
        	log.error("please re-calculate Bar size to pass to ta-lab");
        	return; 
        }
        if (outMACDHist[0] <=0 ) {  // the value comes out 0.21, but other caculate out like 0.17, 
        	log.warn("{} macdHist does not meet.{}", this.getSymbol(), outMACDHist[0]);
        	return; 
        }
        log.info("{} passing MACD check...{}", getSymbol(),outMACDHist[0]);
        
        log.info("Placing orders: {}", getSymbol());
        this.setAction("BUY");
        this.setOrderType("LMT");
       	this.setLmtPrice (getCurrentPrice()); 
       	if (!testing) {
       		orderEngine.placeOrder(this);
       	}
       	placed = true;
       	HESecurity_bak.totalOrderNo++; 
    }
    
    
    private void exitStrategy() {
    	if (!this.placed) { return; }
    	
    	// 1, %2 stop, same day
    	// 2, volume not reached, same day
    	// 3, price is lower than previous close. 
    	
    	// others, 4, 5% trailing stop; 
    	// 5, out after 4/6/or 8 days
    	// 6, high vol reached in first 15-30 minutes. 
    	// 7, 10% profits
    	Toolkit toolkit;
    	toolkit = Toolkit.getDefaultToolkit();
        
    	if ((this.getCurrentPrice()-this.getLmtPrice())/this.getLmtPrice()<-0.02) {  // exit rule 1
    		log.warn("Exit: same day price 2% stop. current price:{}", this.getCurrentPrice());
    		toolkit.beep();
    		return; 
    	}
    	
    	long nowSec = dataEngine.getCurrentServerTime();
    	Date now = new Date(nowSec*1000);
    	long fifteen55Sec = new Date(now.getYear(),now.getMonth(),now.getDate(), 15,55,00).getTime()/1000;
    	long sixteen01Sec = new Date(now.getYear(),now.getMonth(),now.getDate(), 16,01,00).getTime()/1000;
    	if ((nowSec>=fifteen55Sec)&&(nowSec<=sixteen01Sec)) {
    		if (this.getTodayVolume()*100<this.getFRVVolume()) { // exit rule 2
       			log.warn("Exit: today volume not reached FRV volume: {}", this.getTodayVolume()); 
    			toolkit.beep();
        		return;    			
    		}
    		if (this.getTodayClose()<this.getYesterdayClose()) {  // exit rule 3
    			log.warn("Exit: today close lower than yesterday close: {}", this.getTodayClose()); 
    			toolkit.beep();
        		return; 
    		}
    	}
	}
    
    
	public void monitor() {
    	dataEngine.reqRealtimeBar(this, PriceTypeEnum.TRADES.toString(), true);

    	// every 5 minutes, request 3 day, 30 minutes historical data, store them in a data structure?
    	Random generator = new Random();
        int delay = generator.nextInt( 5*1000 );   // delay randomly for 5 sec. unit milisecond
        int period = 5*60*1000;  // repeat every 5 min.
        Timer timer = new Timer();
        timer.scheduleAtFixedRate(new TimerTask() {
        	public void run() {
        		String endDateTime;  //yyyymmdd HH:mm:ss ttt, where "ttt" is the optional time zone.
        		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
         	    endDateTime = sdf.format(new Date(dataEngine.getCurrentServerTime()*1000));
        	    log.info("requesting data till {}", endDateTime);
				dataEngine.reqHistoricalData(HESecurity_bak.this, endDateTime, "3 D", "30 mins", "TRADES", 1, 2);   
        	}
        }, delay, period);

    }
    
    public void concatenateHistData(String date, double open, double high, double low, double close, int volume)
    {  // for ib, date time means the beginning of the bar, e.g. 9:30 means 9:30 to 9:45.. 
    	String dateStr=""; 
    	long datelong=0; 
    	try {
    		datelong = Long.parseLong(date);  // datelong is in second
    		Date datetmp = new Date(datelong * 1000);  // mili-second
    		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd HH:mm:ss");
    		dateStr = sdf.format(datetmp);
    	}
    	catch (Exception e) {
    		// when the last one is not a valid date
    		if (testing) { 
    			// dateEngine is not in testing mode, the one is 
    			// save data to the file to later use. 
    			// saveTestData(); 
    		}
    		checkStrategy();
    		return; // skip the last one
    	}
    	log.trace("historical data: {}, {}, close:{}, volume:{}",
    			new Object[]{ getSymbol(),dateStr, close, volume});
    	
    	long barKey = datelong/(CONSOLIDATE_30MINUTE_BAR * 60);
    	Bar bar = barMap.get(barKey); 
    	if (bar == null) {
    		bar = new Bar(datelong, open, high, low, close, volume); 
    	} else {
    		bar.setDate(datelong);
    		bar.setOpen(open);
    		bar.setHigh(high);
    		bar.setLow(low);
    		bar.setClose(close);
    		bar.setVolume(volume);
    	}
    	barMap.put(barKey, bar); 
    }


	private void saveTestData() {
    	try {
		    BufferedWriter out = new BufferedWriter(new FileWriter("D:\\CommonData\\Stocks\\HETestData.csv"));
		    Collection<Bar> tmpBarColl = barMap.values(); 
		    
		    Iterator<Bar> barIter = tmpBarColl.iterator();
		    while (barIter.hasNext()) {
		    	String str="";
		    	Bar bar = barIter.next();
		    	str=String.format("%d,%f,%f,%f,%f,%d\n", bar.getDate(), bar.getOpen(),bar.getHigh(),bar.getLow(),bar.getClose(),bar.getVolume());
		    	out.write(str);
		    }
		    out.close();
		    log.info("saved to test data file.");
    	} catch (IOException e2) {
    		log.error("Exception in reading testing stock data:{}",e2);
    		return; 
    	}
    }
	
	public void setYesterdayClose(double yesterdayClose) {
		this.yesterdayClose = yesterdayClose;
	}
	public double getYesterdayClose() {
		return yesterdayClose;
	}
	public void setDUVolume(long dUVolume) {
		DUVolume = dUVolume;
	}
	public long getDUVolume() {
		return DUVolume;
	}
	public void setOrderEngine(OrderEngine orderEngine) {
		this.orderEngine = orderEngine;
	}
	public OrderEngine getOrderEngine() {
		return orderEngine;
	}
	public DataEngine getDataEngine() {
		return dataEngine;
	}
	public void setDataEngine(DataEngine dataEngine) {
		this.dataEngine = dataEngine;
	}
	public boolean isTesting() {
		return testing;
	}
	public void setTesting(boolean testing) {
		this.testing = testing;
	}
	public void setFRVVolume(long fRVVolume) {
		FRVVolume = fRVVolume;
	}
	public long getFRVVolume() {
		return FRVVolume;
	}
}